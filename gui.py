# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pyqtgraph as pg
from SigSource import SigSource, spectrum, add_zer
from PhysChannel import PhysChannel, add_delays
from OptReceiver import OptReceiver
from matplotlib import pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
import ast
import numpy as np


class Ui_MainWindow(object):
    def __init__(self):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1500, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.pen = pg.mkPen(color=(9, 139, 219), width=2)
        self.styles = {'color': 'r', 'font-size': '14px'}
        self.preview_plt = pg.PlotWidget(self.centralwidget)

        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(230, 10, 1251, 651))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.plot_layout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.plot_layout.setContentsMargins(0, 0, 0, 0)
        self.plot_layout.setObjectName("plot_layout")
        self.static_canvas = FigureCanvas(Figure())
        self.axes = self.static_canvas.figure.subplots(2, 2,
                                                       gridspec_kw={
                                                           'width_ratios': [3, 1],
                                                           'height_ratios': [1, 1]})
        self.nav = NavigationToolbar(self.static_canvas, self.centralwidget, coordinates=False)
        self.nav.setMinimumWidth(300)
        self.nav.setStyleSheet("QToolBar { border: 0px }")
        self.nav.move(230, 625)
        self.plot_layout.addWidget(self.static_canvas)

        self.sig = SigSource()
        self.phys_channel = PhysChannel()
        self.opt_rec = OptReceiver()
        self.sig_y = None
        self.sig_x = None
        self.sig_del_noise_y = None
        self.sig_del_noise_x = None
        self.conv = None
        self.dt = None
        self.ts = None
        self.us = None

        self.sig_source_lb = QtWidgets.QLabel(self.centralwidget)
        self.sig_source_lb.setGeometry(QtCore.QRect(20, 10, 120, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.sig_source_lb.setFont(font)
        self.sig_source_lb.setObjectName("sig_source_lb")
        self.modulation_cb = QtWidgets.QComboBox(self.centralwidget)
        self.modulation_cb.setGeometry(QtCore.QRect(100, 40, 100, 22))
        self.modulation_cb.setObjectName("modulation_cb")
        self.modulation_lb = QtWidgets.QLabel(self.centralwidget)
        self.modulation_lb.setGeometry(QtCore.QRect(20, 45, 65, 16))
        self.modulation_lb.setObjectName("modulation_lb")
        self.periods_lb = QtWidgets.QLabel(self.centralwidget)
        self.periods_lb.setGeometry(QtCore.QRect(100, 70, 51, 16))
        self.periods_lb.setObjectName("periods_lb")
        self.periods_text = QtWidgets.QLineEdit(self.centralwidget)
        self.periods_text.setGeometry(QtCore.QRect(150, 70, 51, 22))
        self.periods_text.setObjectName("periods_text")
        self.u_text = QtWidgets.QLineEdit(self.centralwidget)
        self.u_text.setGeometry(QtCore.QRect(40, 70, 51, 22))
        self.u_text.setObjectName("u_text")
        self.freq_text = QtWidgets.QLineEdit(self.centralwidget)
        self.freq_text.setGeometry(QtCore.QRect(100, 100, 101, 22))
        self.freq_text.setObjectName("freq_text")
        self.freq_lb = QtWidgets.QLabel(self.centralwidget)
        self.freq_lb.setGeometry(QtCore.QRect(20, 100, 70, 16))
        self.freq_lb.setObjectName("freq_lb")
        self.poly_lb = QtWidgets.QLabel(self.centralwidget)
        self.poly_lb.setGeometry(QtCore.QRect(20, 180, 65, 16))
        self.poly_lb.setObjectName("poly_lb")
        self.poly_text = QtWidgets.QLineEdit(self.centralwidget)
        self.poly_text.setGeometry(QtCore.QRect(100, 180, 101, 22))
        self.poly_text.setObjectName("poly_text")
        self.state_lb = QtWidgets.QLabel(self.centralwidget)
        self.state_lb.setGeometry(QtCore.QRect(20, 210, 65, 16))
        self.state_lb.setObjectName("state_lb")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(20, 230, 191, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.phys_chan_lb = QtWidgets.QLabel(self.centralwidget)
        self.phys_chan_lb.setGeometry(QtCore.QRect(20, 250, 151, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.phys_chan_lb.setFont(font)
        self.phys_chan_lb.setObjectName("phys_chan_lb")
        self.diffusers_lb = QtWidgets.QLabel(self.centralwidget)
        self.diffusers_lb.setGeometry(QtCore.QRect(20, 280, 61, 16))
        self.diffusers_lb.setObjectName("diffusers_lb")
        self.diffusers_text = QtWidgets.QLineEdit(self.centralwidget)
        self.diffusers_text.setGeometry(QtCore.QRect(80, 280, 41, 22))
        self.diffusers_text.setObjectName("diffusers_text")
        self.direct_ray_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.direct_ray_chb.setGeometry(QtCore.QRect(120, 310, 81, 20))
        self.direct_ray_chb.setObjectName("direct_ray_chb")
        self.noise_u_text = QtWidgets.QLineEdit(self.centralwidget)
        self.noise_u_text.setGeometry(QtCore.QRect(80, 310, 31, 22))
        self.noise_u_text.setObjectName("noise_amp_text")
        self.noise_amp_lb = QtWidgets.QLabel(self.centralwidget)
        self.noise_amp_lb.setGeometry(QtCore.QRect(20, 310, 51, 16))
        self.noise_amp_lb.setObjectName("noise_amp_lb")
        self.dist_text = QtWidgets.QLineEdit(self.centralwidget)
        self.dist_text.setGeometry(QtCore.QRect(160, 280, 41, 22))
        self.dist_text.setObjectName("dist_text")
        self.dist_lb = QtWidgets.QLabel(self.centralwidget)
        self.dist_lb.setGeometry(QtCore.QRect(130, 280, 31, 16))
        self.dist_lb.setObjectName("dist_lb")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(20, 420, 191, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(210, 0, 16, 661))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.calc_btn = QtWidgets.QPushButton(self.centralwidget)
        self.calc_btn.setGeometry(QtCore.QRect(110, 440, 93, 28))
        self.calc_btn.setObjectName("calc_btn")
        self.plot_sig_btn = QtWidgets.QPushButton(self.centralwidget)
        self.plot_sig_btn.setGeometry(QtCore.QRect(20, 440, 93, 28))
        self.plot_sig_btn.setObjectName("plot_sig_btn")
        self.noise_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.noise_chb.setGeometry(QtCore.QRect(20, 470, 81, 20))
        self.noise_chb.setObjectName("noise_chb")
        self.delays_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.delays_chb.setGeometry(QtCore.QRect(110, 470, 81, 20))
        self.delays_chb.setObjectName("delays_chb")
        self.dev_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.dev_chb.setGeometry(QtCore.QRect(160, 640, 81, 20))
        self.dev_chb.setObjectName("dev_chb")
        self.state_text = QtWidgets.QLineEdit(self.centralwidget)
        self.state_text.setGeometry(QtCore.QRect(100, 210, 101, 22))
        self.state_text.setObjectName("state_text")
        self.u_lb = QtWidgets.QLabel(self.centralwidget)
        self.u_lb.setGeometry(QtCore.QRect(20, 70, 21, 16))
        self.u_lb.setObjectName("u_lb")
        self.conf_btn = QtWidgets.QToolButton(self.centralwidget)
        self.conf_btn.setGeometry(QtCore.QRect(120, 640, 27, 22))
        self.conf_btn.setObjectName("conf_btn")
        self.conf_text = QtWidgets.QLineEdit(self.centralwidget)
        self.conf_text.setGeometry(QtCore.QRect(60, 640, 51, 22))
        self.conf_text.setObjectName("conf_text")
        self.mod_param_lb = QtWidgets.QLabel(self.centralwidget)
        self.mod_param_lb.setGeometry(QtCore.QRect(20, 150, 70, 16))
        self.mod_param_lb.setObjectName("mod_param_lb")
        self.mod_param_text = QtWidgets.QLineEdit(self.centralwidget)
        self.mod_param_text.setGeometry(QtCore.QRect(100, 150, 101, 22))
        self.mod_param_text.setObjectName("mod_param_text")
        self.a0_text = QtWidgets.QLineEdit(self.centralwidget)
        self.a0_text.setGeometry(QtCore.QRect(40, 340, 31, 22))
        self.a0_text.setObjectName("a0_text")
        self.a0_lb = QtWidgets.QLabel(self.centralwidget)
        self.a0_lb.setGeometry(QtCore.QRect(20, 340, 21, 16))
        self.a0_lb.setObjectName("a0_lb")
        self.r0_text = QtWidgets.QLineEdit(self.centralwidget)
        self.r0_text.setGeometry(QtCore.QRect(105, 340, 31, 22))
        self.r0_text.setObjectName("r0_text")
        self.r0_lb = QtWidgets.QLabel(self.centralwidget)
        self.r0_lb.setGeometry(QtCore.QRect(85, 340, 21, 16))
        self.r0_lb.setObjectName("r0_lb")
        self.n_text = QtWidgets.QLineEdit(self.centralwidget)
        self.n_text.setGeometry(QtCore.QRect(170, 340, 31, 22))
        self.n_text.setObjectName("n_text")
        self.n_lb = QtWidgets.QLabel(self.centralwidget)
        self.n_lb.setGeometry(QtCore.QRect(150, 340, 21, 16))
        self.n_lb.setObjectName("n_lb")
        self.uni_distr_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.uni_distr_chb.setGeometry(QtCore.QRect(20, 400, 101, 20))
        self.uni_distr_chb.setObjectName("uni_distr_chb")
        self.no_rand_u_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.no_rand_u_chb.setGeometry(QtCore.QRect(130, 400, 71, 20))
        self.no_rand_u_chb.setObjectName("no_rand_u_chb")
        self.scale_text = QtWidgets.QLineEdit(self.centralwidget)
        self.scale_text.setGeometry(QtCore.QRect(60, 370, 31, 22))
        self.scale_text.setObjectName("lambda_text")
        self.scale_lb = QtWidgets.QLabel(self.centralwidget)
        self.scale_lb.setGeometry(QtCore.QRect(20, 370, 41, 16))
        self.scale_lb.setObjectName("lambda_lb")
        self.sigma_lb = QtWidgets.QLabel(self.centralwidget)
        self.sigma_lb.setGeometry(QtCore.QRect(110, 370, 21, 16))
        self.sigma_lb.setObjectName("sigma_lb")
        self.sigma_text = QtWidgets.QLineEdit(self.centralwidget)
        self.sigma_text.setGeometry(QtCore.QRect(130, 370, 31, 22))
        self.sigma_text.setObjectName("sigma_text")
        self.apply_btn = QtWidgets.QPushButton(self.centralwidget)
        self.apply_btn.setGeometry(QtCore.QRect(16, 640, 41, 22))
        self.apply_btn.setObjectName("apply_btn")
        self.orig_sig_spec_rb = QtWidgets.QRadioButton(self.centralwidget)
        self.orig_sig_spec_rb.setGeometry(QtCore.QRect(100, 125, 95, 20))
        self.orig_sig_spec_rb.setObjectName("orig_sig_spec_rb")
        self.del_noise_spec_rb = QtWidgets.QRadioButton(self.centralwidget)
        self.del_noise_spec_rb.setGeometry(QtCore.QRect(20, 125, 95, 20))
        self.del_noise_spec_rb.setObjectName("del_noise_spec_rb")

        self.init_gui_elements()

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def init_axes(self):
        self.static_canvas.figure.subplots_adjust(left=0.075, right=0.985, top=0.970, bottom=0.110, hspace=0.320,
                                                  wspace=0.200)
        self.axes[0][0].set_xlabel('t, us')
        self.axes[0][0].set_ylabel('U, μV')
        self.axes[0][0].grid()
        self.axes[1][0].set_xlabel('t, us')
        self.axes[1][0].set_ylabel('|h(t)|²')
        self.axes[1][0].grid()
        self.axes[0][1].set_xlabel('t, us')
        self.axes[0][1].set_ylabel('U, μV')
        self.axes[0][1].grid()
        self.axes[1][1].set_xlabel('f, MHz')
        # self.axes[1][1].set_ylabel('U, μV')
        self.axes[1][1].grid()

    def init_gui_elements(self):
        self.modulation_cb.addItems(['Radio Sig', 'Gold', 'Kasami', 'Rect'])
        self.freq_text.setText('1600')
        self.u_text.setText('1')
        self.periods_text.setText('100')

        self.diffusers_text.setText('5')
        self.dist_text.setText('0')
        self.noise_u_text.setText('5')
        self.a0_text.setText('100')
        self.r0_text.setText('100')
        self.n_text.setText('2.7')
        self.scale_text.setText('2')
        self.sigma_text.setText('4.5')
        self.noise_chb.setChecked(True)
        self.delays_chb.setChecked(True)
        self.orig_sig_spec_rb.setChecked(True)

        self.preview_plt.setBackground('w')
        self.preview_plt.setFixedSize(180, 145)
        self.preview_plt.move(20, 490)
        self.preview_plt.showGrid(x=True, y=True)

        self.init_axes()

        self.plot_sig_btn.clicked.connect(self.show_signal)
        self.calc_btn.clicked.connect(self.L_iter)

    def read_sig_info(self):
        self.sig.modulation = str(self.modulation_cb.currentText())
        self.sig.periods = int(self.periods_text.text())
        self.sig.u = float(self.u_text.text())
        self.sig.freq = float(self.freq_text.text())
        try:
            self.sig.polys = ast.literal_eval(self.poly_text.text())
        except:
            pass
        if self.state_text.text() != '':
            self.sig.state = ast.literal_eval(self.state_text.text())
        if self.mod_param_text.text() == '':
            self.sig.ch_freq = float(self.freq_text.text())
        else:
            ch = ast.literal_eval(self.mod_param_text.text())
            self.sig.ch_freq = ch[0]
            self.sig.ch_n = ch[1]

    def read_ph_ch_info(self):
        self.phys_channel.diff = int(self.diffusers_text.text())
        self.phys_channel.dist = float(self.dist_text.text())
        self.phys_channel.noise_u = float(self.noise_u_text.text())
        self.phys_channel.a0 = float(self.a0_text.text())
        self.phys_channel.r0 = float(self.r0_text.text())
        self.phys_channel.n = float(self.n_text.text())
        self.phys_channel.scale = float(self.scale_text.text())
        self.phys_channel.sigma = float(self.sigma_text.text())

    def gen_sig(self):
        self.sig_x, self.sig_y, self.dt = self.sig.generate_sig()
        self.phys_channel.sig = self.sig_y
        self.phys_channel.sig_step = self.dt

    def gen_delays(self):
        self.ts = self.phys_channel.gen_delays(uniform=self.uni_distr_chb.isChecked())
        self.us = self.phys_channel.gen_amps(self.ts, rand=not self.no_rand_u_chb.isChecked())

    def gen_del_noise_sig(self):
        self.sig_del_noise_x, self.sig_del_noise_y = self.sig_x, self.sig_y
        if self.delays_chb.isChecked():
            self.sig_del_noise_x, self.sig_del_noise_y = add_delays(self.sig_y, self.ts, self.us, self.dt)
            '''fig, ax = plt.subplots(nrows=2, ncols=1)
            ax[0].plot(self.sig_del_noise_x, self.sig_del_noise_y)
            self.gen_conv()
            ax[1].plot(self.sig_del_noise_x, self.conv)
            ax[0].grid()
            ax[1].grid()
            plt.show()'''

        if self.noise_chb.isChecked():
            noise = self.phys_channel.gen_noise(len(self.sig_del_noise_y))
            self.sig_del_noise_y += noise

    def gen_conv(self):
        self.opt_rec.h = self.sig_y
        self.opt_rec.sig = self.sig_del_noise_y
        self.conv = self.opt_rec.matched_fil()

    def plot_conv(self):
        sig_x = self.sig_del_noise_x
        sig_y = self.conv
        self.axes[1][0].plot(sig_x, sig_y)

    def plot_del_noise_sig(self):
        sig2plot_x, sig2plot_y = self.sig_del_noise_x, self.sig_del_noise_y
        self.axes[0][0].plot(sig2plot_x, sig2plot_y)

    def plot_sig(self):
        sig_x, sig_y, dt = self.sig_x, self.sig_y, self.dt
        sig2plot_x = sig_x
        sig2plot_y = sig_y
        self.axes[0][1].plot(sig2plot_x, sig2plot_y)

    def plot_delays(self):
        self.preview_plt.clear()
        bg = pg.BarGraphItem(x=self.ts, height=self.us, width=0.3, brush='r')
        self.preview_plt.addItem(bg)
        self.preview_plt.plot()

    def plot_spec(self):
        sig_x, sig_y, dt = self.sig_x, self.sig_y, self.dt
        if self.del_noise_spec_rb.isChecked():
            sig_x, sig_y = self.sig_del_noise_x, self.sig_del_noise_y
        sig_y = add_zer(sig_y)
        sig_fft_y, sig_fft_x = spectrum(sig_y, dt)
        self.axes[1][1].plot(sig_fft_x, sig_fft_y / max(sig_fft_y))

    def corr(self):
        import numpy as np
        n1 = np.correlate(self.sig_y / 2, self.sig_y / 2, mode='same')
        print(max(n1))
        noise = np.random.normal(0, self.phys_channel.noise_u, size=len(self.sig_y))
        n2 = np.correlate(noise, noise, mode='same')
        print(max(n2))
        print(10 * np.log10(max(n1) / max(n2)))
        print()

    def shift_code(self, code):
        res = np.roll(code, 1)
        # res[len(code) - 1] = 1.0
        return res

    def bin_conv(self, code):
        res = []
        code_copy = np.copy(code)
        for i in range(len(code)):
            tmp = 0
            for j in range(len(code)):
                if code_copy[j] == code[j]:
                    tmp += 1
                else:
                    tmp -= 1
            res.append(tmp)
            code_copy = self.shift_code(code_copy)
        return res

    def L_iter(self):
        self.read_sig_info()
        self.read_ph_ch_info()
        codes = self.sig.gold_code(pair=False)
        print(codes)
        res = self.bin_conv(codes)
        plt.plot(res)
        plt.show()
        '''a = codes[0]
        b = codes[1]
        b_copy = np.copy(b)
        fig, ax = plt.subplots(nrows=2, ncols=1)
        codes = []
        for i in range(1):
            b = b_copy
            for j in range(len(b)):
                code = np.logical_xor(a, b)
                code = code.astype(np.float)
                codes.append(code)
                self.sig_x, self.sig_y, self.dt = self.sig.radio_sig(code)
                conv = np.abs(np.convolve(self.sig_y, self.sig_y, mode='same')) ** 2
                ax[0].clear()
                ax[1].clear()
                ax[0].grid()
                ax[1].grid()
                # ax[0].plot(self.sig_x, self.sig_y)

                # ax[0].set_xlabel('t, us')
                # ax[1].set_xlabel('t, us')
                # ax[1].plot(self.sig_x, conv)

                # plt.show()
                # fig.savefig('signals/' + str(i) + '_' + str(j) + '.png')
                b = self.shift_code(b)
            a = self.shift_code(a)
        cov = np.cov(codes)
        plt.plot(cov[0])
        plt.show()'''

    def show_signal(self):
        self.static_canvas.figure.clear()
        self.axes = self.static_canvas.figure.subplots(2, 2, gridspec_kw={
            'width_ratios': [3, 1],
            'height_ratios': [1, 1]})
        self.init_axes()
        self.read_sig_info()
        self.read_ph_ch_info()
        self.gen_sig()
        self.gen_delays()
        self.gen_del_noise_sig()
        self.gen_conv()
        self.plot_delays()
        self.plot_sig()
        self.plot_del_noise_sig()
        self.plot_conv()
        self.plot_spec()
        self.corr()
        self.static_canvas.draw()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Time Delay"))
        self.sig_source_lb.setText(_translate("MainWindow", "Signal source"))
        self.modulation_lb.setText(_translate("MainWindow", "Modulation:"))
        self.periods_lb.setText(_translate("MainWindow", "Periods:"))
        self.freq_lb.setText(_translate("MainWindow", "Frequency:"))
        self.poly_lb.setText(_translate("MainWindow", "Polynomial:"))
        self.state_lb.setText(_translate("MainWindow", "State:"))
        self.phys_chan_lb.setText(_translate("MainWindow", "Physical channel"))
        self.diffusers_lb.setText(_translate("MainWindow", "Diffusers:"))
        self.direct_ray_chb.setText(_translate("MainWindow", "Direct ray"))
        self.noise_amp_lb.setText(_translate("MainWindow", "Noise U:"))
        self.dist_lb.setText(_translate("MainWindow", "Dist:"))
        self.calc_btn.setText(_translate("MainWindow", "Calculate"))
        self.plot_sig_btn.setText(_translate("MainWindow", "Plot signal"))
        self.noise_chb.setText(_translate("MainWindow", "+Noise"))
        self.delays_chb.setText(_translate("MainWindow", "+Delays"))
        self.dev_chb.setText(_translate("MainWindow", "Dev"))
        self.u_lb.setText(_translate("MainWindow", "U:"))
        self.conf_btn.setText(_translate("MainWindow", "..."))
        self.mod_param_lb.setText(_translate("MainWindow", "Mod. par.:"))
        self.a0_lb.setText(_translate("MainWindow", "A₀:"))
        self.r0_lb.setText(_translate("MainWindow", "r₀:"))
        self.n_lb.setText(_translate("MainWindow", "n:"))
        self.uni_distr_chb.setText(_translate("MainWindow", "Uniform dist."))
        self.no_rand_u_chb.setText(_translate("MainWindow", "No rand"))
        self.scale_lb.setText(_translate("MainWindow", "Scale:"))
        self.sigma_lb.setText(_translate("MainWindow", "σₗₙ:"))
        self.apply_btn.setText(_translate("MainWindow", "Apply"))
        self.orig_sig_spec_rb.setText(_translate("MainWindow", "Orig. spec."))
        self.del_noise_spec_rb.setText(_translate("MainWindow", "DN"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    MainWindow.show()
    sys.exit(app.exec_())
