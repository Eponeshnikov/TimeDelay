# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pyqtgraph as pg
from SigSource import SigSource, spectrum, add_zer
from PhysChannel import PhysChannel, add_delays
from OptReceiver import OptReceiver
from matplotlib import pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
import ast
import time
import numpy as np
from collections import defaultdict
from progressBar import PrintProgressBar


def list_duplicates(seq):
    tally = defaultdict(list)
    for i, item in enumerate(seq):
        tally[item].append(i)
    return ((key, locs) for key, locs in tally.items()
            if len(locs) > 1)


class Ui_MainWindow(object):
    def __init__(self):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1500, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.pen = pg.mkPen(color=(9, 139, 219), width=2)
        self.styles = {'color': 'r', 'font-size': '14px'}
        self.preview_plt = pg.PlotWidget(self.centralwidget)

        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(230, 10, 1251, 651))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.plot_layout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.plot_layout.setContentsMargins(0, 0, 0, 0)
        self.plot_layout.setObjectName("plot_layout")
        self.static_canvas = FigureCanvas(Figure())
        self.axes = self.static_canvas.figure.subplots(2, 2,
                                                       gridspec_kw={
                                                           'width_ratios': [3, 1],
                                                           'height_ratios': [1, 1]})
        self.nav = NavigationToolbar(self.static_canvas, self.centralwidget, coordinates=False)
        self.nav.setMinimumWidth(300)
        self.nav.setStyleSheet("QToolBar { border: 0px }")
        self.nav.move(230, 625)
        self.plot_layout.addWidget(self.static_canvas)

        self.sig = SigSource()
        self.phys_channel = PhysChannel()
        self.opt_rec = OptReceiver()

        self.sig_y = None
        self.sig_x = None
        self.sig_del_noise_y = None
        self.sig_del_noise_x = None

        self.conv = None
        self.peaks_x = None
        self.peaks_y = None
        self.right_peaks = None
        self.false_peaks = None
        self.lost_peaks = None
        self.real_right_peaks = None
        self.finded_ids = None
        self.lost_ids = None
        self.border_x = None
        self.border_y = None
        self.height = 0

        self.dt = None
        self.ts = None
        self.us = None
        self.snrs = None
        self.snrs_finded = None
        self.snrs_lost = None

        self.sig_fft_y = None
        self.sig_fft_x = None
        self.spec_w = None

        self.sig_source_lb = QtWidgets.QLabel(self.centralwidget)
        self.sig_source_lb.setGeometry(QtCore.QRect(20, 10, 120, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.sig_source_lb.setFont(font)
        self.sig_source_lb.setObjectName("sig_source_lb")
        self.modulation_cb = QtWidgets.QComboBox(self.centralwidget)
        self.modulation_cb.setGeometry(QtCore.QRect(100, 40, 100, 22))
        self.modulation_cb.setObjectName("modulation_cb")
        self.modulation_lb = QtWidgets.QLabel(self.centralwidget)
        self.modulation_lb.setGeometry(QtCore.QRect(20, 45, 65, 16))
        self.modulation_lb.setObjectName("modulation_lb")
        self.periods_lb = QtWidgets.QLabel(self.centralwidget)
        self.periods_lb.setGeometry(QtCore.QRect(100, 70, 51, 16))
        self.periods_lb.setObjectName("periods_lb")
        self.periods_text = QtWidgets.QLineEdit(self.centralwidget)
        self.periods_text.setGeometry(QtCore.QRect(150, 70, 51, 22))
        self.periods_text.setObjectName("periods_text")
        self.u_text = QtWidgets.QLineEdit(self.centralwidget)
        self.u_text.setGeometry(QtCore.QRect(40, 70, 51, 22))
        self.u_text.setObjectName("u_text")
        self.freq_text = QtWidgets.QLineEdit(self.centralwidget)
        self.freq_text.setGeometry(QtCore.QRect(100, 100, 101, 22))
        self.freq_text.setObjectName("freq_text")
        self.freq_lb = QtWidgets.QLabel(self.centralwidget)
        self.freq_lb.setGeometry(QtCore.QRect(20, 100, 70, 16))
        self.freq_lb.setObjectName("freq_lb")
        self.poly_lb = QtWidgets.QLabel(self.centralwidget)
        self.poly_lb.setGeometry(QtCore.QRect(20, 180, 65, 16))
        self.poly_lb.setObjectName("poly_lb")
        self.poly_text = QtWidgets.QLineEdit(self.centralwidget)
        self.poly_text.setGeometry(QtCore.QRect(100, 180, 101, 22))
        self.poly_text.setObjectName("poly_text")
        self.state_lb = QtWidgets.QLabel(self.centralwidget)
        self.state_lb.setGeometry(QtCore.QRect(20, 210, 65, 16))
        self.state_lb.setObjectName("state_lb")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(20, 230, 191, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.phys_chan_lb = QtWidgets.QLabel(self.centralwidget)
        self.phys_chan_lb.setGeometry(QtCore.QRect(20, 250, 151, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.phys_chan_lb.setFont(font)
        self.phys_chan_lb.setObjectName("phys_chan_lb")
        self.diffusers_lb = QtWidgets.QLabel(self.centralwidget)
        self.diffusers_lb.setGeometry(QtCore.QRect(20, 280, 61, 16))
        self.diffusers_lb.setObjectName("diffusers_lb")
        self.diffusers_text = QtWidgets.QLineEdit(self.centralwidget)
        self.diffusers_text.setGeometry(QtCore.QRect(80, 280, 41, 22))
        self.diffusers_text.setObjectName("diffusers_text")
        self.direct_ray_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.direct_ray_chb.setGeometry(QtCore.QRect(120, 310, 81, 20))
        self.direct_ray_chb.setObjectName("direct_ray_chb")
        self.noise_u_text = QtWidgets.QLineEdit(self.centralwidget)
        self.noise_u_text.setGeometry(QtCore.QRect(80, 310, 31, 22))
        self.noise_u_text.setObjectName("noise_amp_text")
        self.noise_amp_lb = QtWidgets.QLabel(self.centralwidget)
        self.noise_amp_lb.setGeometry(QtCore.QRect(20, 310, 51, 16))
        self.noise_amp_lb.setObjectName("noise_amp_lb")
        self.dist_text = QtWidgets.QLineEdit(self.centralwidget)
        self.dist_text.setGeometry(QtCore.QRect(160, 280, 41, 22))
        self.dist_text.setObjectName("dist_text")
        self.dist_lb = QtWidgets.QLabel(self.centralwidget)
        self.dist_lb.setGeometry(QtCore.QRect(130, 280, 31, 16))
        self.dist_lb.setObjectName("dist_lb")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(20, 420, 191, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(210, 0, 16, 661))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.calc_btn = QtWidgets.QPushButton(self.centralwidget)
        self.calc_btn.setGeometry(QtCore.QRect(110, 440, 93, 28))
        self.calc_btn.setObjectName("calc_btn")
        self.plot_sig_btn = QtWidgets.QPushButton(self.centralwidget)
        self.plot_sig_btn.setGeometry(QtCore.QRect(20, 440, 93, 28))
        self.plot_sig_btn.setObjectName("plot_sig_btn")
        self.noise_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.noise_chb.setGeometry(QtCore.QRect(20, 470, 81, 20))
        self.noise_chb.setObjectName("noise_chb")
        self.delays_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.delays_chb.setGeometry(QtCore.QRect(110, 470, 81, 20))
        self.delays_chb.setObjectName("delays_chb")
        self.dev_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.dev_chb.setGeometry(QtCore.QRect(160, 640, 81, 20))
        self.dev_chb.setObjectName("dev_chb")
        self.state_text = QtWidgets.QLineEdit(self.centralwidget)
        self.state_text.setGeometry(QtCore.QRect(100, 210, 101, 22))
        self.state_text.setObjectName("state_text")
        self.u_lb = QtWidgets.QLabel(self.centralwidget)
        self.u_lb.setGeometry(QtCore.QRect(20, 70, 21, 16))
        self.u_lb.setObjectName("u_lb")
        self.conf_text = QtWidgets.QLineEdit(self.centralwidget)
        self.conf_text.setGeometry(QtCore.QRect(60, 640, 91, 22))
        self.conf_text.setObjectName("conf_text")
        self.mod_param_lb = QtWidgets.QLabel(self.centralwidget)
        self.mod_param_lb.setGeometry(QtCore.QRect(20, 150, 70, 16))
        self.mod_param_lb.setObjectName("mod_param_lb")
        self.mod_param_text = QtWidgets.QLineEdit(self.centralwidget)
        self.mod_param_text.setGeometry(QtCore.QRect(100, 150, 101, 22))
        self.mod_param_text.setObjectName("mod_param_text")
        self.a0_text = QtWidgets.QLineEdit(self.centralwidget)
        self.a0_text.setGeometry(QtCore.QRect(40, 340, 31, 22))
        self.a0_text.setObjectName("a0_text")
        self.a0_lb = QtWidgets.QLabel(self.centralwidget)
        self.a0_lb.setGeometry(QtCore.QRect(20, 340, 21, 16))
        self.a0_lb.setObjectName("a0_lb")
        self.r0_text = QtWidgets.QLineEdit(self.centralwidget)
        self.r0_text.setGeometry(QtCore.QRect(105, 340, 31, 22))
        self.r0_text.setObjectName("r0_text")
        self.r0_lb = QtWidgets.QLabel(self.centralwidget)
        self.r0_lb.setGeometry(QtCore.QRect(85, 340, 21, 16))
        self.r0_lb.setObjectName("r0_lb")
        self.n_text = QtWidgets.QLineEdit(self.centralwidget)
        self.n_text.setGeometry(QtCore.QRect(170, 340, 31, 22))
        self.n_text.setObjectName("n_text")
        self.n_lb = QtWidgets.QLabel(self.centralwidget)
        self.n_lb.setGeometry(QtCore.QRect(150, 340, 21, 16))
        self.n_lb.setObjectName("n_lb")
        self.uni_distr_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.uni_distr_chb.setGeometry(QtCore.QRect(20, 400, 101, 20))
        self.uni_distr_chb.setObjectName("uni_distr_chb")
        self.no_rand_u_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.no_rand_u_chb.setGeometry(QtCore.QRect(130, 400, 71, 20))
        self.no_rand_u_chb.setObjectName("no_rand_u_chb")
        self.scale_text = QtWidgets.QLineEdit(self.centralwidget)
        self.scale_text.setGeometry(QtCore.QRect(60, 370, 31, 22))
        self.scale_text.setObjectName("lambda_text")
        self.scale_lb = QtWidgets.QLabel(self.centralwidget)
        self.scale_lb.setGeometry(QtCore.QRect(20, 370, 41, 16))
        self.scale_lb.setObjectName("lambda_lb")
        self.sigma_lb = QtWidgets.QLabel(self.centralwidget)
        self.sigma_lb.setGeometry(QtCore.QRect(110, 370, 21, 16))
        self.sigma_lb.setObjectName("sigma_lb")
        self.sigma_text = QtWidgets.QLineEdit(self.centralwidget)
        self.sigma_text.setGeometry(QtCore.QRect(130, 370, 31, 22))
        self.sigma_text.setObjectName("sigma_text")
        self.orig_sig_spec_rb = QtWidgets.QRadioButton(self.centralwidget)
        self.orig_sig_spec_rb.setGeometry(QtCore.QRect(70, 125, 95, 20))
        self.orig_sig_spec_rb.setObjectName("orig_sig_spec_rb")
        self.del_noise_spec_rb = QtWidgets.QRadioButton(self.centralwidget)
        self.del_noise_spec_rb.setGeometry(QtCore.QRect(20, 125, 95, 20))
        self.del_noise_spec_rb.setObjectName("del_noise_spec_rb")
        self.balanced_codes_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.balanced_codes_chb.setGeometry(QtCore.QRect(160, 125, 41, 20))
        self.balanced_codes_chb.setObjectName("balanced_codes_chb")
        self.border_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.border_chb.setGeometry(QtCore.QRect(550, 640, 81, 20))
        self.border_chb.setObjectName("border_chb")
        self.right_rays_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.right_rays_chb.setGeometry(QtCore.QRect(620, 640, 81, 20))
        self.right_rays_chb.setObjectName("right_rays_chb")
        self.false_rays_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.false_rays_chb.setGeometry(QtCore.QRect(710, 640, 81, 20))
        self.false_rays_chb.setObjectName("false_rays_chb")
        self.lost_rays_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.lost_rays_chb.setGeometry(QtCore.QRect(800, 640, 81, 20))
        self.lost_rays_chb.setObjectName("lost_rays_chb")
        self.real_rays_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.real_rays_chb.setGeometry(QtCore.QRect(880, 640, 81, 20))
        self.real_rays_chb.setObjectName("real_rays_chb")
        self.snr_show_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.snr_show_chb.setGeometry(QtCore.QRect(960, 640, 91, 20))
        self.snr_show_chb.setObjectName("snr_show_chb")
        self.save_chb = QtWidgets.QCheckBox(self.centralwidget)
        self.save_chb.setGeometry(QtCore.QRect(5, 640, 81, 20))
        self.save_chb.setObjectName("save_chb")

        self.init_gui_elements()

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def init_axes(self):
        self.static_canvas.figure.subplots_adjust(left=0.06, right=0.985, top=0.955, bottom=0.110, hspace=0.320,
                                                  wspace=0.200)
        self.axes[0][0].set_xlabel('t, us')
        self.axes[0][0].set_ylabel('U, μV')
        self.axes[0][0].grid()
        self.axes[0][0].set_title('Noisy signal')
        self.axes[1][0].set_xlabel('t, us')
        self.axes[1][0].set_ylabel('|h(t)|')
        self.axes[1][0].grid()
        self.axes[1][0].set_title('Response of correlation receiver')
        self.axes[0][1].set_xlabel('t, us')
        self.axes[0][1].set_ylabel('U, μV')
        self.axes[0][1].grid()
        self.axes[0][1].set_title('Reference signal')
        self.axes[1][1].set_xlabel('f, MHz')
        self.axes[1][1].grid()
        self.axes[1][1].set_title('Spectrum')

    def init_gui_elements(self):
        self.modulation_cb.addItems(['Gold', 'Radio Sig', 'Rect'])
        self.freq_text.setText('1600')
        self.u_text.setText('1')
        self.periods_text.setText('31')

        self.diffusers_text.setText('5')
        self.dist_text.setText('200')
        self.noise_u_text.setText('5')
        self.a0_text.setText('100')
        self.r0_text.setText('100')
        self.n_text.setText('2.7')
        self.scale_text.setText('0.2')
        self.sigma_text.setText('4.5')
        self.noise_chb.setChecked(True)
        self.delays_chb.setChecked(True)
        self.orig_sig_spec_rb.setChecked(True)
        self.right_rays_chb.setChecked(True)
        self.false_rays_chb.setChecked(True)
        self.lost_rays_chb.setChecked(True)
        self.snr_show_chb.setChecked(True)
        self.border_chb.setChecked(True)

        self.preview_plt.setBackground('w')
        self.preview_plt.setFixedSize(180, 145)
        self.preview_plt.move(20, 490)
        self.preview_plt.showGrid(x=True, y=True)

        self.init_axes()

        self.plot_sig_btn.clicked.connect(self.show_signal)
        self.calc_btn.clicked.connect(self.iter_params)

    def read_sig_info(self):
        self.sig.modulation = str(self.modulation_cb.currentText())
        self.sig.periods = float(self.periods_text.text())
        if self.sig.modulation != 'Rect':
            self.sig.periods = int(self.sig.periods)
        self.sig.u = float(self.u_text.text())
        self.sig.freq = float(self.freq_text.text())
        self.sig.bc = self.balanced_codes_chb.isChecked()
        try:
            self.sig.polys = ast.literal_eval(self.poly_text.text())
        except:
            pass
        if self.state_text.text() != '':
            self.sig.state = ast.literal_eval(self.state_text.text())
        if self.mod_param_text.text() == '':
            self.sig.ch_freq = float(self.freq_text.text())
        else:
            ch = ast.literal_eval(self.mod_param_text.text())
            self.sig.ch_freq = ch[0]
            self.sig.ch_n = ch[1]

    def read_ph_ch_info(self):
        self.phys_channel.diff = int(self.diffusers_text.text())
        self.phys_channel.dist = float(self.dist_text.text())
        self.phys_channel.noise_u = float(self.noise_u_text.text())
        self.phys_channel.a0 = float(self.a0_text.text())
        self.phys_channel.r0 = float(self.r0_text.text())
        self.phys_channel.n = float(self.n_text.text())
        self.phys_channel.scale = float(self.scale_text.text())
        self.phys_channel.sigma = float(self.sigma_text.text())

        self.opt_rec.noise_u = float(self.noise_u_text.text())
        self.opt_rec.dev = self.dev_chb.isChecked()
        self.opt_rec.save_fig = self.save_chb.isChecked()

    def gen_sig(self):
        self.sig_x, self.sig_y, self.dt = self.sig.generate_sig()
        self.phys_channel.sig = self.sig_y
        self.phys_channel.sig_step = self.dt
        self.opt_rec.dt = self.dt

    def gen_delays(self):
        self.phys_channel.uniform = self.uni_distr_chb.isChecked()
        self.phys_channel.dr = self.direct_ray_chb.isChecked()
        self.phys_channel.rand = not self.no_rand_u_chb.isChecked()
        self.ts = self.phys_channel.gen_delays()
        self.us = self.phys_channel.gen_amps(self.ts)

        self.opt_rec.us = np.copy(self.us)

    def gen_del_noise_sig(self):
        self.sig_del_noise_x, self.sig_del_noise_y = np.copy(self.sig_x), np.copy(self.sig_y)
        if self.delays_chb.isChecked():
            self.sig_del_noise_x, self.sig_del_noise_y = add_delays(self.sig_y, self.ts, self.us, self.dt)
        if self.noise_chb.isChecked():
            noise = self.phys_channel.gen_noise(len(self.sig_del_noise_y))
            self.sig_del_noise_y += noise

    def gen_conv(self):
        self.opt_rec.h = self.sig_y
        self.opt_rec.sig = self.sig_del_noise_y
        self.conv = self.opt_rec.matched_fil()

    def gen_peaks(self):
        if self.sig.modulation == 'Rect':
            self.opt_rec.rect = True
        else:
            self.opt_rec.rect = False
        if self.sig.modulation == 'Gold':
            self.opt_rec.gold = True
        else:
            self.opt_rec.gold = False
        self.peaks_x, self.border_x, self.border_y, self.height = self.opt_rec.find_peaks_()
        sig_x = np.append(self.sig_del_noise_x, np.array([max(self.sig_del_noise_x) + self.dt]))
        sig_len = len(self.sig_x) * self.dt
        peaks_x = sig_x[self.peaks_x.astype(np.int)] - sig_len / 2
        peaks_x = np.sort(peaks_x)
        matr = []
        for peak in peaks_x:
            matr.append(np.abs(self.ts - peak))
        diffs = np.zeros(len(peaks_x))
        diffs_ids = []
        for i in range(len(peaks_x)):
            diffs[i] = min(matr[i])
            id = (i, np.argmin(matr[i]))
            diffs_ids.append(id)
        diff_len = len(diffs_ids)
        right_j = []
        diffs_ids_copy = diffs_ids.copy()
        false_ids = []
        for r in range(diff_len):
            right_j.append(diffs_ids[r][1])

        for dub in sorted(list_duplicates(right_j)):
            for_compare = []
            for ind in dub[1]:
                val2del = (diffs_ids_copy[ind][0], dub[0])
                false_ids.append(val2del)
                diffs_ids.remove(val2del)
                for_compare.append(matr[diffs_ids_copy[ind][0]][dub[0]])
            min_el = np.argmin(for_compare)
            val = (dub[1][min_el], dub[0])
            false_ids.remove(val)
            diffs_ids.insert(dub[0], val)
        right_peaks_ids = []
        real_peaks_ids = []
        false_peaks_ids = []
        lost_peaks_ref = np.arange(len(self.ts))
        lost_peaks_ids = []
        for d in diffs_ids:
            right_peaks_ids.append(d[0])
            real_peaks_ids.append(d[1])
        for f in false_ids:
            false_peaks_ids.append(f[0])

        real_peaks_ids = np.array(real_peaks_ids)

        for peak in lost_peaks_ref:
            if len(np.where(real_peaks_ids == peak)[0]) == 0:
                lost_peaks_ids.append(peak)

        # lost_peaks_ids = np.array(lost_peaks_ids)
        self.right_peaks = [[], []]
        self.false_peaks = [[], []]
        self.lost_peaks = [[], []]
        self.real_right_peaks = [[], []]

        sig_x = np.append(self.sig_del_noise_x, np.array([max(self.sig_del_noise_x) + self.dt]))
        sig_y = np.append(np.abs(self.conv), np.zeros(1))

        peaks_x = self.peaks_x
        peaks_x = np.sort(peaks_x)
        peaks_y = sig_y[peaks_x.astype(np.int)]
        peaks_x = sig_x[peaks_x.astype(np.int)]
        self.finded_ids = real_peaks_ids.astype(np.int)
        self.lost_ids = np.array(lost_peaks_ids).astype(np.int)
        if not self.phys_channel.dr:
            self.finded_ids += 1
            self.lost_ids += 1
        self.peaks_x = peaks_x
        self.peaks_y = peaks_y
        self.snrs_finded = self.snrs[real_peaks_ids.astype(np.int)]
        self.snrs_lost = self.snrs[lost_peaks_ids]
        self.real_right_peaks[0] = self.ts[real_peaks_ids.astype(np.int)] + sig_len / 2
        self.real_right_peaks[1] = self.us[real_peaks_ids.astype(np.int)] / max(self.us) * max(self.conv)
        self.lost_peaks[0] = self.ts[lost_peaks_ids] + sig_len / 2
        self.lost_peaks[1] = self.us[lost_peaks_ids] / max(self.us) * max(self.conv)
        self.right_peaks[0] = peaks_x[right_peaks_ids]
        self.right_peaks[1] = peaks_y[right_peaks_ids]
        self.false_peaks[0] = peaks_x[false_peaks_ids]
        self.false_peaks[1] = peaks_y[false_peaks_ids]

    def gen_borders(self):
        sig_x = np.append(self.sig_del_noise_x, np.array([max(self.sig_del_noise_x) + self.dt]))
        mid_b = []
        for i, border in enumerate(self.border_x):
            mid_b.append(border[np.argmax(self.border_y[i])])
        for i in range(len(self.border_x)):
            border_x = self.border_x[i]
            border_x = sig_x[border_x]
            self.border_x[i] = border_x
            self.border_y[i] /= max(self.border_y[i])
            self.border_y[i] *= np.abs(self.conv[mid_b[i]])

    def gen_spec(self):
        sig_x, sig_y, dt = self.sig_x, self.sig_y, self.dt
        if self.del_noise_spec_rb.isChecked():
            sig_x, sig_y = self.sig_del_noise_x, self.sig_del_noise_y
        sig_y = add_zer(sig_y)
        self.sig_fft_y, self.sig_fft_x = spectrum(sig_y, dt)
        self.sig_fft_y /= max(self.sig_fft_y)
        ids = np.where(self.sig_fft_y > 0.7)[0]
        x_s = self.sig_fft_x[ids]
        x_s = np.sort(x_s)
        self.spec_w = x_s[len(x_s) - 1] - x_s[0]

    def plot_conv(self):
        sig_x = np.append(self.sig_del_noise_x, np.array([max(self.sig_del_noise_x) + self.dt]))
        sig_y = np.append(np.abs(self.conv), np.zeros(1))
        self.axes[1][0].plot(sig_x, sig_y)

    def plot_peaks(self):
        if self.false_rays_chb.isChecked():
            self.axes[1][0].plot(self.false_peaks[0], self.false_peaks[1], 'o', color='r', label='False rays')
        if self.right_rays_chb.isChecked():
            self.axes[1][0].plot(self.right_peaks[0], self.right_peaks[1], 'vb', color='limegreen', label='True rays')
            if self.snr_show_chb.isChecked():
                for i in range(len(self.right_peaks[0])):
                    an = str(np.round(self.snrs_finded[i], 2)) + ' dB'
                    y = self.right_peaks[1][i] * 1.05
                    if y > max(self.right_peaks[1]):
                        y = self.right_peaks[1][i] * 1.01
                    self.axes[1][0].annotate(an, xy=(self.right_peaks[0][i], y))
        if self.real_rays_chb.isChecked():
            sig_len = len(self.sig_x) * self.dt
            self.axes[1][0].plot(self.ts + sig_len / 2, self.us / max(self.us) * max(self.conv), 'd', color='gold',
                                 label='Real rays')
            self.axes[1][0].vlines(x=self.ts + sig_len / 2, ymin=0, ymax=self.us / max(self.us) * max(self.conv),
                                   color='gold')
        if self.lost_rays_chb.isChecked():
            self.axes[1][0].plot(self.lost_peaks[0], self.lost_peaks[1], 'X', color='indigo', label='Lost rays')
            self.axes[1][0].vlines(x=self.lost_peaks[0], ymin=0, ymax=self.lost_peaks[1], color='indigo')

    def plot_borders(self):
        sig_x = np.append(self.sig_del_noise_x, np.array([max(self.sig_del_noise_x) + self.dt]))
        if self.border_chb.isChecked():
            for i in range(len(self.border_x)):
                self.axes[1][0].plot(self.border_x[i], self.border_y[i], color='orange', linestyle='dashdot')
                if i == 0:
                    self.axes[1][0].plot(self.border_x[i], self.border_y[i], color='orange', linestyle='dashdot',
                                         label='Border')

            self.axes[1][0].hlines(y=self.height, xmin=0, xmax=max(sig_x), color='grey', linestyle='dashed',
                                   label='Threshold')

    def plot_del_noise_sig(self):
        sig2plot_x, sig2plot_y = self.sig_del_noise_x, self.sig_del_noise_y
        self.axes[0][0].plot(sig2plot_x, sig2plot_y)

    def plot_sig(self):
        sig_x, sig_y, dt = self.sig_x, self.sig_y, self.dt
        sig2plot_x = sig_x
        sig2plot_y = sig_y
        self.axes[0][1].plot(sig2plot_x, sig2plot_y)

    def plot_delays(self):
        self.preview_plt.clear()
        if self.delays_chb.isChecked():
            bg = pg.BarGraphItem(x=self.ts, height=self.us, width=len(self.sig_x) * (self.sig_x[1] - self.sig_x[0]),
                                 brush='r')
            self.preview_plt.addItem(bg)
            self.preview_plt.plot()

    def plot_spec(self):
        self.axes[1][1].plot(self.sig_fft_x, self.sig_fft_y)
        left = self.sig.freq - self.spec_w * 3
        if left < 0:
            left = 0
        right = self.sig.freq + self.spec_w * 3
        self.axes[1][1].set_xlim([left, right])
        self.axes[1][1].text(int(self.sig.freq + self.spec_w * 0.9), max(self.sig_fft_y) * 0.88,
                             'Bandwidth: ' + str(np.round(self.spec_w)) + ' MHz',
                             bbox=dict(facecolor='none', edgecolor='black', boxstyle='round,pad=1'), fontsize=6)

    def snr_calc(self):
        n1s = []
        n2s = []
        for u in self.us:
            n1 = np.sum((self.sig_y * u) ** 2)
            n1s.append(n1)
            n2 = len(self.sig_y) * self.phys_channel.noise_u ** 2
            n2s.append(n2)
        n1s = np.array(n1s)
        self.snrs = 10 * np.log10(n1s / n2s)
        # print('SNR:', 10 * np.log10(n1s / n2))

    def read_config(self, file):
        import configparser
        config = configparser.ConfigParser()  # создаём объекта парсера
        config.read(file)  # читаем конфиг
        return config

    def gen_iter_arrs(self):
        # self.conf_text.setText('gold.ini')
        file = 'config/' + self.conf_text.text()
        config = self.read_config(file)
        main_dict = {}
        for conf in config:
            params = []
            params_names = []
            for param in config[conf]:
                params.append(config[conf][param])
                params_names.append(param)
            if len(params) == 1:
                if params_names[0] == 'range':
                    range_params = ast.literal_eval(params[0])
                    range_params[1] *= 1.1
                    if range_params[2] == 0:
                        range_params[2] = range_params[0]
                    arr = np.arange(range_params[0], range_params[1], range_params[2])
                    main_dict[conf] = arr
                elif params_names[0] == 'type':
                    main_dict[conf] = params[0]
                elif params_names[0] == 'value':
                    if int(params[0]) == 0:
                        main_dict[conf] = [0]
                    elif int(params[0]) == 1:
                        main_dict[conf] = [1]
                    elif int(params[0]) == 2:
                        main_dict[conf] = [0, 1]
                elif params_names[0] == 'numbers':
                    arr = np.arange(1, int(params[0]) + 1)
                    main_dict[conf] = arr
            elif len(params) > 1:
                if conf == 'Polynomial':
                    pairs = []
                    first = ast.literal_eval(params[0])
                    if type(first) is list:
                        first = [(first)]
                    second = ast.literal_eval(params[1])
                    if type(second) is list:
                        second = [(second)]
                    if int(params[2]) == 0:
                        all_fs = []
                        for f in first:
                            fs = []
                            for i in range(len(second)):
                                fs.append(f)
                            all_fs.append(fs)

                        for af in all_fs:
                            for i in range(len(second)):
                                val = (af[i], second[i])
                                pairs.append(val)
                    else:
                        if len(second) == len(first):
                            for i in range(len(second)):
                                val = (first[i], second[i])
                                pairs.append(val)
                        else:
                            return -1
                    main_dict[conf] = pairs
                elif conf == 'State':
                    if int(params[1]) == 0:
                        main_dict[params_names[1]] = [0]
                    elif int(params[1]) == 1:
                        main_dict[params_names[1]] = [1]
                    elif int(params[1]) == 2:
                        main_dict[params_names[1]] = [0, 1]

                    if params[0] == '-1':
                        main_dict[conf] = [[]]
                    else:
                        states = ast.literal_eval(params[0])
                        if type(states) is list:
                            states = [(states)]
                        main_dict[conf] = states
        print(main_dict)
        return main_dict

    def gen_req_arr(self, main_dict):
        req_names = []
        main_arr = []
        out_names = []
        if main_dict['Modulation'] == 'Gold':
            req_names = ['Modulation', 'Frequency', 'ChipFreq', 'ChipN',
                         'Polynomial', 'balanced', 'State', 'Diffusers', 'Distance', 'Noise', 'A0', 'r0', 'n',
                         'Scale', 'Sigma', 'Unidist', 'NoRand', 'DirectRay', 'Realization']
            out_names = ['Code', 'M-seq', 'State', 'Chek for balance', 'Right peaks', 'False peaks', 'Lost peaks',
                         'Real peaks', 'Right peaks ids', 'Lost peaks ids', 'Right SNR', 'Lost SNR', 'SNR', 'Δω']
        elif main_dict['Modulation'] == 'Radio Sig':
            req_names = ['Modulation', 'Frequency', 'ChipFreq', 'ChipN', 'Periods', 'Diffusers', 'Distance',
                         'Noise', 'A0', 'r0', 'n', 'Scale', 'Sigma', 'Unidist', 'NoRand', 'DirectRay', 'Realization']
            out_names = ['Right peaks', 'False peaks', 'Lost peaks',
                         'Real peaks', 'Right peaks ids', 'Lost peaks ids', 'Right SNR', 'Lost SNR', 'SNR', 'Δω']
        for name in req_names:
            main_arr.append(main_dict[name])
        req_names.remove('Realization')
        if main_dict['Modulation'] == 'Gold':
            req_names.remove('State')
        df_column = req_names + out_names
        return main_arr, df_column

    def gen_dir_name(self):
        name = 'plots\\' + self.sig.modulation + '_' + str(self.phys_channel.diff) + '_' + str(
            self.phys_channel.noise_u)
        name = name.replace(' ', '')
        name = name.replace('.', '@')
        self.opt_rec.dir_name = name

    def apply_params(self, val, modulation):
        self.sig.u = 1
        if modulation == 'Gold':
            self.sig.modulation = modulation
            self.sig.freq = val[0]
            self.sig.ch_freq = val[1]
            self.sig.ch_n = val[2]
            self.sig.polys = val[3]
            self.sig.bc = val[4]
            self.sig.state = val[5]
            self.phys_channel.diff = val[6]
            self.phys_channel.dist = val[7]
            self.phys_channel.noise_u = val[8]
            self.opt_rec.noise_u = val[8]
            self.phys_channel.a0 = val[9]
            self.phys_channel.r0 = val[10]
            self.phys_channel.n = val[11]
            self.phys_channel.scale = val[12]
            self.phys_channel.sigma = val[13]
            self.phys_channel.uniform = val[14]
            self.phys_channel.rand = not val[15]
            self.phys_channel.dr = val[16]
        if modulation == 'Radio Sig':
            self.sig.modulation = modulation
            self.sig.freq = val[0]
            self.sig.ch_freq = val[1]
            self.sig.ch_n = val[2]
            self.sig.periods = val[3]
            self.phys_channel.diff = val[4]
            self.phys_channel.dist = val[5]
            self.phys_channel.noise_u = val[6]
            self.opt_rec.noise_u = val[6]
            self.phys_channel.a0 = val[7]
            self.phys_channel.r0 = val[8]
            self.phys_channel.n = val[9]
            self.phys_channel.scale = val[10]
            self.phys_channel.sigma = val[11]
            self.phys_channel.uniform = val[12]
            self.phys_channel.rand = not val[13]
            self.phys_channel.dr = val[14]

    def gen_out(self):
        self.gen_sig()
        self.gen_delays()
        self.gen_del_noise_sig()
        self.gen_conv()
        self.snr_calc()
        self.gen_peaks()
        self.gen_borders()
        self.gen_spec()
        out = []
        sig_len = len(self.sig_x) * self.dt
        real = self.ts + sig_len / 2
        if self.sig.modulation == 'Gold':
            out = (
            self.sig.code_info.tolist(), self.sig.m_seq_info.tolist(), self.sig.state_info.tolist(), self.sig.bc_info,
            np.round(self.right_peaks[0], 3).tolist(), np.round(self.false_peaks[0], 3).tolist(),
            np.round(self.lost_peaks[0], 3).tolist(),
            np.round(real, 3).tolist(), self.finded_ids.tolist(), self.lost_ids.tolist(),
            np.round(self.snrs_finded, 2).tolist(),
            np.round(self.snrs_lost, 2).tolist(), np.round(self.snrs, 2).tolist(), np.round(self.spec_w, 1))
        if self.sig.modulation == 'Radio Sig':
            out = (np.round(self.right_peaks[0], 3).tolist(), np.round(self.false_peaks[0], 3).tolist(),
                   np.round(self.lost_peaks[0], 3).tolist(),
                   np.round(real, 3).tolist(), self.finded_ids.tolist(), self.lost_ids.tolist(),
                   np.round(self.snrs_finded, 2).tolist(),
                   np.round(self.snrs_lost, 2).tolist(), np.round(self.snrs, 2).tolist(), np.round(self.spec_w, 1))
        return out

    def iter_params(self):
        import pandas as pd
        from itertools import product
        main_dict = self.gen_iter_arrs()
        main_arr, df_column = self.gen_req_arr(main_dict)
        modulation = main_arr[0]
        df = pd.DataFrame()
        number = 0
        length = 1
        for i in range(1, len(main_arr)):
            length *= len(main_arr[i])
        if modulation == 'Gold':
            for freq, chf, chn, poly, balance, state, diff, dist, noise, a0, r0, n, scale, sigma, undist, norand, \
                dirray, num in product(main_arr[1], main_arr[2], main_arr[3], main_arr[4], main_arr[5], main_arr[6],
                                       main_arr[7], main_arr[8], main_arr[9], main_arr[10], main_arr[11], main_arr[12],
                                       main_arr[13], main_arr[14], main_arr[15], main_arr[16], main_arr[17],
                                       main_arr[18]):
                start_time = time.time()
                val = (freq, chf, chn, poly, balance, state, int(diff), dist, noise, a0, r0, n, scale, sigma,
                       bool(undist), bool(norand), bool(dirray))
                self.apply_params(val, modulation)
                out = self.gen_out()
                val = (modulation, freq, chf, chn, poly, balance, int(diff), dist, noise, a0, r0, n, scale, sigma,
                       bool(undist), bool(norand), bool(dirray))
                res = val + out
                ser_df = pd.Series(res)
                df = df.append(ser_df, ignore_index=True)
                number += 1
                time_s = time.time() - start_time
                PrintProgressBar(time_s, number, length, prefix='Progress:', suffix='Complete', length=50)

        elif modulation == 'Radio Sig':
            for freq, chf, chn, per, diff, dist, noise, a0, r0, n, scale, sigma, undist, norand, \
                dirray, num in product(main_arr[1], main_arr[2], main_arr[3], main_arr[4], main_arr[5], main_arr[6],
                                       main_arr[7], main_arr[8], main_arr[9], main_arr[10], main_arr[11], main_arr[12],
                                       main_arr[13], main_arr[14], main_arr[15], main_arr[16]):
                start_time = time.time()
                val = (freq, chf, chn, per, int(diff), dist, noise, a0, r0, n, scale, sigma, bool(undist), bool(norand),
                       bool(dirray))
                self.apply_params(val, modulation)
                out = self.gen_out()
                val = (modulation, freq, chf, chn, per, int(diff), dist, noise, a0, r0, n, scale, sigma, bool(undist),
                       bool(norand), bool(dirray))
                res = val + out
                ser_df = pd.Series(res)
                df = df.append(ser_df, ignore_index=True)
                number += 1
                time_s = time.time() - start_time
                PrintProgressBar(time_s, number, length, prefix='Progress:', suffix='Complete', length=50)

        df.columns = df_column
        name = self.conf_text.text()
        name = name.replace('.ini', str(len(main_arr[16])) + '.csv')
        df.to_csv('csv/' + name)

    def show_signal(self):
        self.static_canvas.figure.clear()
        self.axes = self.static_canvas.figure.subplots(2, 2, gridspec_kw={
            'width_ratios': [3, 1],
            'height_ratios': [1, 1]})
        self.init_axes()
        self.read_sig_info()
        self.read_ph_ch_info()
        self.gen_sig()
        self.gen_delays()
        self.gen_del_noise_sig()
        self.gen_dir_name()
        self.gen_conv()
        self.snr_calc()
        self.gen_peaks()
        self.gen_borders()
        self.gen_spec()
        self.plot_delays()
        self.plot_sig()
        self.plot_del_noise_sig()
        self.plot_conv()
        self.plot_peaks()
        self.plot_borders()
        self.axes[1][0].legend(loc='upper right')
        self.plot_spec()
        self.static_canvas.draw()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Time Delay"))
        self.sig_source_lb.setText(_translate("MainWindow", "Signal source"))
        self.modulation_lb.setText(_translate("MainWindow", "Modulation:"))
        self.periods_lb.setText(_translate("MainWindow", "Periods:"))
        self.freq_lb.setText(_translate("MainWindow", "Frequency:"))
        self.poly_lb.setText(_translate("MainWindow", "Polynomial:"))
        self.state_lb.setText(_translate("MainWindow", "State:"))
        self.phys_chan_lb.setText(_translate("MainWindow", "Physical channel"))
        self.diffusers_lb.setText(_translate("MainWindow", "Diffusers:"))
        self.direct_ray_chb.setText(_translate("MainWindow", "Direct ray"))
        self.noise_amp_lb.setText(_translate("MainWindow", "Noise U:"))
        self.dist_lb.setText(_translate("MainWindow", "Dist:"))
        self.calc_btn.setText(_translate("MainWindow", "Calculate"))
        self.plot_sig_btn.setText(_translate("MainWindow", "Plot signal"))
        self.noise_chb.setText(_translate("MainWindow", "+Noise"))
        self.delays_chb.setText(_translate("MainWindow", "+Delays"))
        self.dev_chb.setText(_translate("MainWindow", "Dev"))
        self.u_lb.setText(_translate("MainWindow", "U:"))
        self.mod_param_lb.setText(_translate("MainWindow", "Mod. par.:"))
        self.a0_lb.setText(_translate("MainWindow", "A₀:"))
        self.r0_lb.setText(_translate("MainWindow", "r₀:"))
        self.n_lb.setText(_translate("MainWindow", "n:"))
        self.uni_distr_chb.setText(_translate("MainWindow", "Uniform dist."))
        self.no_rand_u_chb.setText(_translate("MainWindow", "No rand"))
        self.scale_lb.setText(_translate("MainWindow", "Scale:"))
        self.sigma_lb.setText(_translate("MainWindow", "σₗₙ:"))
        self.orig_sig_spec_rb.setText(_translate("MainWindow", "Orig. spec."))
        self.del_noise_spec_rb.setText(_translate("MainWindow", "DN"))
        self.balanced_codes_chb.setText(_translate("MainWindow", "BC"))
        self.border_chb.setText(_translate("MainWindow", "Border"))
        self.right_rays_chb.setText(_translate("MainWindow", "True rays"))
        self.false_rays_chb.setText(_translate("MainWindow", "False rays"))
        self.lost_rays_chb.setText(_translate("MainWindow", "Lost rays"))
        self.real_rays_chb.setText(_translate("MainWindow", "Real rays"))
        self.snr_show_chb.setText(_translate("MainWindow", "Show SNR"))
        self.save_chb.setText(_translate("MainWindow", "Save"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    MainWindow.show()
    sys.exit(app.exec_())
